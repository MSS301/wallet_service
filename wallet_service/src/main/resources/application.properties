spring.application.name=wallet-service

# ================================
# Server
# ================================
server.port=8085
server.servlet.context-path=/wallet

# ================================
# Datasource - NEON PostgreSQL
# ================================
spring.datasource.url=jdbc:postgresql://ep-dark-union-adqldoet-pooler.c-2.us-east-1.aws.neon.tech:5432/neondb?sslmode=require&channelBinding=require&prepareThreshold=0&preparedStatementCacheQueries=0
spring.datasource.username=neondb_owner
spring.datasource.password=npg_Zwq1fJP7ltoD
spring.datasource.driver-class-name=org.postgresql.Driver

# ================================
# HikariCP - PRODUCTION OPTIMIZED FOR NEON
# ================================
spring.datasource.hikari.pool-name=NeonHikariPool-WalletService

# Connection Pool Sizing
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=3

# Connection Lifecycle (CRITICAL FOR NEON)
spring.datasource.hikari.max-lifetime=240000
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.connection-timeout=10000

# Connection Health
spring.datasource.hikari.keepalive-time=120000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.connection-test-query=SELECT 1

# Leak Detection
spring.datasource.hikari.leak-detection-threshold=60000

# Connection Properties
spring.datasource.hikari.data-source-properties.socketTimeout=30
spring.datasource.hikari.data-source-properties.tcpKeepAlive=true

# ================================
# JPA / Hibernate
# ================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Query Performance
spring.jpa.properties.hibernate.query.plan_cache_max_size=2048
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=128

# Batch Processing (improves write performance)
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Transaction Management
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext

# ================================
# Kafka Configuration
# ================================
spring.kafka.bootstrap-servers=localhost:9094

# Consumer Configuration (handled by KafkaConsumerConfig.java)
spring.kafka.consumer.group-id=wallet-service-group

# Producer Configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Jackson Configuration for Date/Time Serialization
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.write-date-timestamps-as-nanoseconds=false
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSS
spring.jackson.time-zone=UTC
spring.jackson.deserialization.adjust-dates-to-context-time-zone=false

# ================================
# JWT Configuration
# ================================
jwt.secret=1TjXchw5FloESb63Kc+DFhTARvpWL4jUGCwfGWxuG5SIf/1y/LgJxHnMqaF6A/ij

# ================================
# API Documentation
# ================================
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# ================================
# Eureka Client
# ================================
eureka.client.service-url.defaultZone=http://localhost:8888/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
